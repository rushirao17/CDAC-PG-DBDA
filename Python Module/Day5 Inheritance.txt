1) Create a multi-level inheritance , override default constructors in the child classes , instantiate the child class and show how will u invoke parent class constructor from child class ?
class Parent:
    def __init__(self):
        print("Parent class constructor")
    
class Child(Parent):
    def __init__(self):
        print("Child class constructor")
        super().__init__()

c=Child()



2) create a class "Vehicle", define a method "public void start()" in it. From this class derive a class FourWheeler. How will u override "start()" method of parent class ?
class Vehicle:
    def start(self):
        print("Vehicle Started")
    
class FourWheeler(Vehicle):
    def start(self):
        print("FourWheeler Started")

f=FourWheeler()
f.start()



3) Go for Hierarchical inheritance, create instances of child class and observe constructor invocation.
class Parent:
    def __init__(self):
        print("Parent Constructor")

class Child1(Parent):
    def __init__(self):
        print("Child1 Constructor")

class Child2(Parent):
    def __init__(self):
        print("Child2 Constructor")

c1=Child1()
c2=Child2()



4) Create a class "Top1" with "disp1()" method. From this class Derive "Bottom1", "Bottom2" and "Bottom3" classes ,override the "disp1()".
create a function "perform" which can take argument as object of any child class. Now show how will u achieve dynamic polymorphism.
class Top1:
    def disp1(self):
        print("Top1")

class Bottom1(Top1):
    def disp1(self):
        print("Bottom1")

class Bottom2(Top1):
    def disp1(self):
        print("Bottom2")

class Bottom3(Top1):
    def disp1(self):
        print("Bottom3")

def perform(obj):
    obj.disp1()

obj1=Bottom1()
obj2=Bottom2()
obj3=Bottom3()

perform(obj1)
perform(obj2)
perform(obj3)



5) create Base class and Sub class with parameterized constructors. Show how will you invoke Base class parameterized constructor from Sub class.
class Base:
    def __init__(self, a):
        self.a=a
        print("Base class constructor")
              
class Sub(Base):
    def __init__(self, a, b):
        Base.__init__(self, a)
        self.b=b
        print("Sub class constructor")

s=Sub(10,20)



"""6)
create a hierarchy
				Course
					void start()
					void end()
override "start()" and "end()" in all the child classes.

		MsCit		       Basic	        	Dbda
	  start()	       start()	       start()
		end()		        end()	          end()				
 					                      orientation()
write a function "perform"
	perform function should be defined in such a way that it can accept any course and invoke "start()" and "end()" functions.
	also make sure if "Dbda" is passed , its "orientation()" method also should be called."""

class Course:
    def start(self):
        pass
    def end(self):
        pass

class MsCit(Course):
    def start(self):
        print("MsCit Started")
    def end(self):
        print("MsCit Ended")

class Basic(Course):
    def start(self):
        print("Basic Started")
    def end(self):
        print("Basic Ended")

class Dbda(Course):
    def start(self):
        print("Dbda Started")
    def end(self):
        print("Dbda Ended")
    def orientation(self):
        print("Dbda Orientation")

def perform(course):
    course.start()
    course.end()
    if isinstance(course, Dbda):
        course.orientation()

perform(MsCit())
perform(Basic())
perform(Dbda())




""" 7)
create a hierarchy: Animal
			void makeSound()
			override "makeSound()" in all the child classes.

		Dog		Cat		Tiger
	    makeSound()     makeSound()      makeSound()
					      hunting()
define perform function.
	perform function should be defined in such a way that it can accept any animal and invoke "makeSound()" function.
	also make sure if "Tiger" is passed , its "hunting()" method also should be called."""

class Animal:
    def makeSound(self):
        pass

class Dog(Animal):
    def makeSound(self):
        print("Dog barks")

class Cat(Animal):
    def makeSound(self):
        print("Cat meows")

class Tiger(Animal):
    def makeSound(self):
        print("Tiger roars")
    def hunting(self):
        print("Tiger hunts")

def perform(animal):
    animal.makeSound()
    if isinstance(animal,Tiger):
        animal.hunting()

perform(Dog())
perform(Cat())
perform(Tiger())
